#!/usr/bin/env python3
"""
Very simple parser to extract performance measurements from the stdout of an IOR
job.
"""

import json
import argparse

DEBUG = False

def parse(ior_log, access=None):
    """Extract performance results from the stdout stream of an IOR run

    Args:
        ior_log (iterable): Any object that can be iterated to produce lines of
            output generated by IOR
        access (str or None): Return only "read," "write," "remove," or "all"
            access modes.  If None, return results from all access modes.
    """
    if access and access == "all":
        # access == None is equivalent to returning all access types
        access = None
    parse_section = None
    results = []
    header_data = {}
    for lineno, line in enumerate(ior_log):
        if parse_section is None:
            if line.startswith("Options:"):
                parse_section = "options"
                dprint("Opened 'options' section at line %d" % lineno)
            elif line.startswith("Results:"):
                parse_section = "results"
                dprint("Opened 'results' section at line %d" % lineno)

        elif parse_section == "options":
            if line.startswith('api '):
                header_data['api'] = line.split(':')[1].strip()
            elif line.startswith('access '):
                header_data['motif'] = line.split(':')[1].strip()
            elif line.startswith('type '):
                header_data['mpiio-mode'] = line.split(':')[1].strip()
            elif line.startswith('segments '):
                header_data['segments'] = int(line.split(':')[1].strip())
            elif line.startswith('tasks '):
                header_data['tasks'] = int(line.split(':')[1].strip())
            elif line.startswith('repetitions '):
                header_data['repetitions'] = int(line.split(':')[1].strip())
            elif line.startswith('clients per node'):
                header_data['ppn'] = int(line.split(':')[1].strip())
            elif not line.strip():
                parse_section = None
                dprint("Closed 'options' section at line %d" % lineno)

        elif parse_section == "results":
            if line.startswith('write') or line.startswith('read') or line.startswith('remove'):
                # parse read, write, and remove lines.  readcheck/writecheck/etc
                # aren't yet supported.
                fields = line.split()
                if not access or fields[0] == access:
                    record = {
                        'access': fields[0],
                        'bw_mibs': float(fields[1]) if fields[1] != "-" else -1.0,
                        'blocksize_kib': float(fields[2]) if fields[2] != "-" else -1.0,
                        'xfersize_kib': float(fields[3]) if fields[3] != "-" else -1.0,
                        'open_secs': float(fields[4]) if fields[4] != "-" else -1.0,
                        'io_secs': float(fields[5]) if fields[5] != "-" else -1.0,
                        'close_secs': float(fields[6]) if fields[6] != "-" else -1.0,
                        'total_secs': float(fields[7]) if fields[7] != "-" else -1.0,
                        'iteration': int(fields[8]) if fields[8] != "-" else -1,
                    }
                    record.update(header_data)
                    results.append(record)
            elif not line.strip() and results:
                parse_section = None
                dprint("Closed 'results' section at line %d" % lineno)

    return results

def dprint(*args, **kwargs):
    """Print debug messages if enabled
    """
    if DEBUG:
        print(*args, **kwargs)

def main(argv=None):
    """Command-line wrapper around parse()

    Args:
        argv (list or None): Command-line arguments to pass to argparse.  If
            None, fall back to the default of using sys.argv
    """
    global DEBUG

    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("iorlog", type=str, help="path to IOR log")
    parser.add_argument("-a", "--access", type=str, help="only return read, write, or remove timings (default: all)")
    parser.add_argument("-d", "--debug", action='store_true', help="enable debug messages")
    args = parser.parse_args(argv)
    if args.debug:
        DEBUG = True
    results = parse(open(args.iorlog, 'r'), access=args.access)
    print(json.dumps(results, indent=4, sort_keys=True))

if __name__ == "__main__":
    main()
